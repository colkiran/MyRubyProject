Basic Regular Expression
------------------------
^			-	to match the begning of the string
$			- 	to match the end of the string

.			-	single character 

*			-	zero or more occurances
?			-  	zero or single occurance
+			-	one or more occurance
{n}			-   exactly n times
{n,}		-   n or more times
{n, m}		- 	min n and max m times
()			- 	grouping
[]			-	character class
|			- 	alternation
\			- 	supress the meaning of a regular expression

--------------------------------------------------------------------------------

\w		-	Word 		- alpha numeric characters
\W		-	Non Word	- Special characters (*&#@$% )

\s		-	Space		- spaces
\S		-	Non Space	- every thing other than spaces

\d		-	digits		- numeric data
\D		- 	non digit	- non numeric data

\b		-	word boundary
\B		-	non word boundary

\A		- 	Begning of the string		^
\Z		- 	End of the string			$


Write a regular expression to vaildate a date

valid date
-----------

dd/mm/yyyy
dd-mm-yyyy

invalid date
------------
dd/mm-yyyy
dd-mm/yyyy

dd - 01 - 31
mm - 01 - 12
yyyy - 1900+


url = "www.google.co.in / search='%new hindi movies?' % / get_data2019 / fetch_data frm_1 / imdb? %hindi%movies$& / result = page1.aspx"


regular expression to find the text

	a. before /
	b. between /
	c. after /
	

--------------------------------------------------------------------------

Look Ahead & Look Behind
------------------------

This is a more advanced technique that might not be available in all regex implementations. Ruby’s regular expression engine is able to do this, so let’s see how to take advantage of that.

Look ahead lets us peek and see if there is a specific match before or after.

Name	Description
(?=pat)		Positive lookahead
(?<=pat)	Positive lookbehind
(?!pat)		Negative lookahead
(?<!pat)	Negative lookbehind

Example: is there a number preceded by at least one letter?

def number_after_word?(str)
  !!(str =~ /(?<=\w) (\d+)/)
end
number_after_word?("Grade 99")


-------------------------------------------------------------------------------------------

Exceptions
----------

begin

	connecting to a database
	fetch the data

rescue ConnectionError
	
	puts "Error Occured"
ensure
	puts "This code is executed in all scenarios"	
end

Exception
  NoMemoryError
  ScriptError
    LoadError
    NotImplementedError
    SyntaxError
  SecurityError
  SignalException
    Interrupt
  StandardError -- default for rescue
    ArgumentError
      UncaughtThrowError
    EncodingError
    FiberError
    IOError
      EOFError
    IndexError
      KeyError
      StopIteration
    LocalJumpError
    NameError
      NoMethodError
    RangeError
      FloatDomainError
    RegexpError
    RuntimeError -- default for raise
    SystemCallError
      Errno::*
    ThreadError
    TypeError
    ZeroDivisionError
  SystemExit
  SystemStackError































